{"version":3,"file":"skills.min.js","sources":["../src/skills.js"],"sourcesContent":["define(['jquery', 'core/modal_factory', 'core/str', 'core_form/modalform'], function($, ModalFactory, Str, ModalForm) {\n\n    const SELECTORS = {\n        table: '#tool_skills_list',\n        editskill: '[data-target=\"toolskill-edit\"]',\n        skillsRow: '#tool_skills_list .skill-actions a.action-edit'\n    };\n\n    class ToolSkillsCourses {\n\n        constructor(skillID, courseID) {\n\n            this.SELECTORS = SELECTORS;\n            this.skillCourseID = '';\n            this.skillID = skillID;\n            this.courseID = courseID;\n\n            this.SELECTORS.root = '#tool_skills_list [data-skillid=\"'+this.skillID+'\"]';\n            this.addActionListiners();\n\n        }\n\n        getRoot() {\n            console.log(this.SELECTORS.root);\n            return document.querySelector(this.SELECTORS.root);\n        }\n\n        showContentForm() {\n\n            var formClass = 'tool_skills\\\\form\\\\course_form';\n\n            const modalForm = new ModalForm({\n\n                formClass: formClass,\n                // Add as many arguments as you need, they will be passed to the form:\n                args: {courseid: this.courseID,  skill: this.skillID},\n                // Modal configurations, here set modal title.\n                modalConfig: {title: Str.get_string('courseskills', 'tool_skills')},\n                // DOM element that should get the focus after the modal dialogue is closed:\n                // returnFocus: element,\n            });\n\n            modalForm.show();\n\n            // this.dynamicForm.load({instanceid: this.instanceID, widgetname: widgetName, blockid: this.blockID});\n\n            // Listen to events if you want to execute something on form submit. Event detail will contain everything the process() function returned:\n            // if (addListener) {\n            var self = this;\n            modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, function(e) {\n                var form = e.target.querySelector('form');\n                // var blockID = (new FormData(form)).get('skill');\n                // ToolSkillsCourses.refresh(blockID);\n                window.location.reload();\n            })\n        };\n\n\n        addActionListiners() {\n\n            var self = this;\n\n            this.getRoot().addEventListener('click', function(e) {\n\n                if (e.target.closest(SELECTORS.editskill)) {\n                    e.preventDefault();\n                    // self.layoutID = e.target.closest(SELECTORS.addblock).dataset.layoutid;\n                    self.showContentForm();\n                }\n            }.bind(this));\n        }\n\n        /**\n         * Add event listenrs.\n         *\n         * @param {Integer} courseID\n         */\n        static createInstances(courseID) {\n\n            let skills = document.querySelectorAll(SELECTORS.skillsRow);\n\n            const skillsList = [];\n\n            if (skills !== null) {\n\n                skills.forEach((skl) => {\n                    var skillID = skl.dataset.skillid;\n                    if (skillID in skillsList) {\n                        var skill = skillsList[skillID];\n                    } else {\n                        var skill = new ToolSkillsCourses(skillID, courseID);\n                        skillsList[skillID] = skill;\n                    }\n                });\n            }\n        };\n\n        /**\n         * Trigger the filter form to submit. to refresh the course content.\n         */\n        static refresh(blockID) {\n           // Quick fix. TODO: Need to implement the method in Dashinstance.js to referesh the content from anywhere.\n           var block = '#inst'+blockID;\n           if ($(block).find('select:eq(1)').length == 0 ) {\n               $(block).find('.filter-form').append('<select style=\"display:none;\"><option>1</option></select>');\n           }\n           console.log($(block).find('.filter-form').find('select'));\n\n           $(block).find('.filter-form').find('select').trigger('change');\n       }\n\n    }\n\n    return {\n\n        init: function(courseID) {\n            ToolSkillsCourses.createInstances(courseID);\n        }\n    }\n})\n"],"names":["define","$","ModalFactory","Str","ModalForm","SELECTORS","table","editskill","skillsRow","ToolSkillsCourses","constructor","skillID","courseID","skillCourseID","root","this","addActionListiners","getRoot","console","log","document","querySelector","showContentForm","modalForm","formClass","args","courseid","skill","modalConfig","title","get_string","show","addEventListener","events","FORM_SUBMITTED","e","target","window","location","reload","self","closest","preventDefault","bind","skills","querySelectorAll","skillsList","forEach","skl","dataset","skillid","blockID","block","find","length","append","trigger","init","createInstances"],"mappings":"AAAAA,4BAAO,CAAC,SAAU,qBAAsB,WAAY,wBAAwB,SAASC,EAAGC,aAAcC,IAAKC,iBAEjGC,UAAY,CACdC,MAAO,oBACPC,UAAW,iCACXC,UAAW,wDAGTC,kBAEFC,YAAYC,QAASC,eAEZP,UAAYA,eACZQ,cAAgB,QAChBF,QAAUA,aACVC,SAAWA,cAEXP,UAAUS,KAAO,oCAAoCC,KAAKJ,QAAQ,UAClEK,qBAITC,iBACIC,QAAQC,IAAIJ,KAAKV,UAAUS,MACpBM,SAASC,cAAcN,KAAKV,UAAUS,MAGjDQ,wBAIUC,UAAY,IAAInB,UAAU,CAE5BoB,UAJY,iCAMZC,KAAM,CAACC,SAAUX,KAAKH,SAAWe,MAAOZ,KAAKJ,SAE7CiB,YAAa,CAACC,MAAO1B,IAAI2B,WAAW,eAAgB,kBAKxDP,UAAUQ,OAOVR,UAAUS,iBAAiBT,UAAUU,OAAOC,gBAAgB,SAASC,GACtDA,EAAEC,OAAOf,cAAc,QAGlCgB,OAAOC,SAASC,YAKxBvB,yBAEQwB,KAAOzB,UAENE,UAAUe,iBAAiB,QAAS,SAASG,GAE1CA,EAAEC,OAAOK,QAAQpC,UAAUE,aAC3B4B,EAAEO,iBAEFF,KAAKlB,oBAEXqB,KAAK5B,8BAQYH,cAEfgC,OAASxB,SAASyB,iBAAiBxC,UAAUG,iBAE3CsC,WAAa,GAEJ,OAAXF,QAEAA,OAAOG,SAASC,UACRrC,QAAUqC,IAAIC,QAAQC,WACtBvC,WAAWmC,eACPnB,MAAQmB,WAAWnC,aACpB,CACCgB,MAAQ,IAAIlB,kBAAkBE,QAASC,UAC3CkC,WAAWnC,SAAWgB,yBASvBwB,aAERC,MAAQ,QAAQD,QACwB,GAAxClD,EAAEmD,OAAOC,KAAK,gBAAgBC,QAC9BrD,EAAEmD,OAAOC,KAAK,gBAAgBE,OAAO,6DAEzCrC,QAAQC,IAAIlB,EAAEmD,OAAOC,KAAK,gBAAgBA,KAAK,WAE/CpD,EAAEmD,OAAOC,KAAK,gBAAgBA,KAAK,UAAUG,QAAQ,iBAKrD,CAEHC,KAAM,SAAS7C,UACXH,kBAAkBiD,gBAAgB9C"}